动态规划相关:

啥问题适用动态规划？ 1. 求最大值/最小值 2. 求可不可行 3. 求方案总数
如果一个问题让你求出"所有的"方案和结果,则肯定不是使用动态规划。

解法核心就是 大问题分解出可以可重复利用的小问题

通用解法:
1.划分可重复使用的子问题(写状态转移方程)
2.自底向上递归(其实就是复用上一次的结果)或者自顶向下(过程中保存每一个子问题解,拿解时先看是否已经保存解了)
3.构造递归终止条件,得到结果(除了终止条件,还有初始条件也需要思考)

优化动态规划:
1.通过变换状态优化(状态转移方程写的更精妙点,费脑子)
2.通过决策单调优化(一般就用于划分型,优化划分条件)


以下是动态规划的类型
* 矩阵型(比如走路,上下左右,一共有多少种方案)
* 序列型
* 双序列型
* 划分型
* 区间型
* 背包型
* 状态压缩型(一般在算法竞赛中才会出现)
* 树型(一般在算法竞赛中才会出现)


相关题目:
1.最经典的就是背包问题:
有 N 件物品和一个容量为 V 的背包。放入第 i 件物品耗费的费用是 Ci，得到的价值是 Wi。求解将哪些物品装入背包可使价值总和最大。
每种物品仅有一件，可以选择放或不放。
F[i, v] 表示前 i 件物品恰放入一个容量为 v 的背包可以获得的最大价值。则其状态转移方程便是：
F[i, v] = max{F[i − 1, v], F[i − 1, v − Ci] + Wi}
分解成了"将前 i 件物品放入容量为 v 的背包中"这个子问题，若只考虑第 i 件物品的策略(放或不放),
那么就可以转化为一个只和前 i − 1 件物品相关的问题。
如果不放第 i 件物品,那么问题就转化为"前 i − 1 件物品放入容量为 v 的背包中",价值为 F[i − 1, v];
如果放第 i 件物品，那么问题就转化为"前 i − 1 件物品放入剩下的容量为 v − Ci 的背包中",
此时能获得的最大价值就是 F[i − 1, v − Ci] 再加上通过放入第 i 件物品获得的价值 Wi。

2.最低票价问题
在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。
火车票有三种不同的销售方式:
一张为期一天的通行证售价为 costs[0] 美元；
一张为期七天的通行证售价为 costs[1] 美元；
一张为期三十天的通行证售价为 costs[2] 美元。
通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。

输入：days = [1,4,6,7,8,20], costs = [2,7,15]
输出：11
解释：
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
你总共花了 $11，并完成了你计划的每一天旅行。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-cost-for-tickets
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

